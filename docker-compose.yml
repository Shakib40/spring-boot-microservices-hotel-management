version: "3.9"

services:
  mysql-auth:
    image: mysql:8.0
    container_name: mysql-auth
    environment:
      MYSQL_ROOT_PASSWORD: "Shakib@40"
      MYSQL_DATABASE: hotel_management_db_auth
    # internal only; no host port published
    networks:
      - spring-net
    volumes:
      - mysql-auth-data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -p$${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  redis-auth:
    image: redis:7-alpine
    container_name: redis-auth
    command: ["redis-server", "--appendonly", "yes"]
    # internal only; no host port published
    networks:
      - spring-net
    volumes:
      - redis-auth-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  # mysql-order:
  #   image: mysql:8.0
  #   container_name: mysql-order
  #   environment:
  #     MYSQL_ROOT_PASSWORD: "Shakib@40"
  #     MYSQL_DATABASE: hotel_management_db_order
  #   networks:
  #     - spring-net
  #   volumes:
  #     - mysql-order-data:/var/lib/mysql
  #   healthcheck:
  #     test: ["CMD-SHELL", "mysqladmin ping -h localhost -p$${MYSQL_ROOT_PASSWORD} --silent"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #     start_period: 20s

  # redis-order:
  #   image: redis:7-alpine
  #   container_name: redis-order
  #   command: ["redis-server", "--appendonly", "yes"]
  #   networks:
  #     - spring-net
  #   volumes:
  #     - redis-order-data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #     start_period: 10s

  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - spring-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - spring-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      mysql-auth:
        condition: service_healthy
      redis-auth:
        condition: service_healthy
    networks:
      - spring-net
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8081/auth/actuator/health/readiness"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  # order-service:
  #   build: ./order-service
  #   container_name: order-service
  #   ports:
  #     - "8083:8083"
  #   depends_on:
  #     config-server:
  #       condition: service_healthy
  #     discovery-server:
  #       condition: service_healthy
  #     mysql-order:
  #       condition: service_healthy
  #     redis-order:
  #       condition: service_healthy
  #   networks:
  #     - spring-net
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8083/orders/actuator/health"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 15s

  # api-gateway:
  #   build: ./api-gateway
  #   container_name: api-gateway
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     auth-service:
  #       condition: service_healthy
  #     order-service:
  #       condition: service_healthy
  #     config-server:
  #       condition: service_healthy
  #     discovery-server:
  #       condition: service_healthy
  #   networks:
  #     - spring-net
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 15s


networks:
  spring-net:
    driver: bridge

volumes:
  mysql-auth-data:
  mysql-order-data:
  redis-auth-data:
  redis-order-data:
